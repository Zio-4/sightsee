generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

enum DistanceUnits {
  MILES
  KILOMETERS
  BANANAS
}

enum DateFormat {
  DAY
  MONTH
}

enum TimeFormat {
  TWELVE
  TWENTYFOUR
}


model Profile {
  clerkId                        String           @id @unique
  bio                            String
  distanceUnits                  DistanceUnits
  dateFormat                     DateFormat
  timeFormat                     TimeFormat
  commentsNotification           Boolean
  remindersNotification          Boolean
  collaboratorJoinedNotification Boolean
  itineraries                    Itinerary[]
  comments                       Comment[]
  collaborations                 Collaboration[]
  credits                        Int              @default(0)
  payments                       Payment[]
  CreditPurchase                 CreditPurchase[]
  CreditUsage                    CreditUsage[]
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

model Payment {
  id              String           @id @default(uuid())
  profileId       String
  profile         Profile          @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  amount          Float
  currency        String?
  status          PaymentStatus
  stripePaymentId String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  CreditPurchase  CreditPurchase[]
}

model CreditPurchase {
  id        String   @id @default(uuid())
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  amount    Int
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model CreditUsage {
  id         String   @id @default(uuid())
  profileId  String
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  amount     Int
  activityId Int
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
}

model Itinerary {
  id              Int            @id @default(autoincrement())
  creator         String?
  name            String
  startDate       DateTime
  endDate         DateTime
  profileId       String?
  likes           Int
  public          Boolean
  coverPhoto      String?
  ipAddress       String?
  comments        Comment[]
  profile         Profile?       @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  destinations    Destination[]
  collaborationId Int?
  collaboration   Collaboration?
}

model Destination {
  id          Int       @id @default(autoincrement())
  name        String
  itineraryId Int
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  tripDays    TripDay[]
}

model Collaboration {
  id          Int       @id @default(autoincrement())
  itineraryId Int       @unique
  itinerary   Itinerary @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  profile     Profile[]
}

model TripDay {
  id            Int         @id @default(autoincrement())
  date          DateTime
  destinationId Int
  destination   Destination @relation(fields: [destinationId], references: [id], onDelete: Cascade)
  activities    Activity[]
}

model Comment {
  id          Int        @id @default(autoincrement())
  text        String
  itineraryId Int?
  profileId   String
  itinerary   Itinerary? @relation(fields: [itineraryId], references: [id], onDelete: Cascade)
  profile     Profile    @relation(fields: [profileId], references: [clerkId])
}

model Activity {
  id            Int           @id @default(autoincrement())
  name          String
  startTime     DateTime?
  endTime       DateTime?
  contactInfo   String?
  note          String?
  address       String?
  tripDayId     Int
  photo         String?
  tripDay       TripDay       @relation(fields: [tripDayId], references: [id], onDelete: Cascade)
  longitude     Float?
  latitude      Float?
  cost          Float?
  isAiGenerated Boolean       @default(false)
  creditUsages  CreditUsage[]
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

model Invite {
  id           Int          @id @default(autoincrement())
  inviteeEmail String
  token        String       @unique @db.Uuid
  expiration   DateTime
  itineraryId  Int
  senderEmail  String
  senderUserId String
  status       InviteStatus
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([token])
}
